
/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace boxalino_client_SDK_CSharp.Services
{
    /// <summary>
    /// item found
    /// 
    /// <dl>
    /// <dt>values</dt>
    /// <dd>map containing name of the field and list of values as strings</dd>
    /// <dd>if index contains no value for a field, empty array will be returned.</dd>
    /// 
    /// <dt>score</dt>
    /// <dd>index score of the hit</dd>
    /// 
    /// <dt>scenarioId</dt>
    /// <dd>source scenarioId in case of mixed recommendations modes</dd>
    /// </dl>
    /// </summary>
#if !SILVERLIGHT
    [Serializable]
#endif
    public partial class PropertyQuery : TBase
    {
      
        
  /**
   * @var string
   */ 
        public string name = null;

        public string Name
        {
            get
            {
                return name;
            }
            set
            {
                __isset.name = true;
                this.name = value;
            }
        }
  /**
   * @var int
   */
  public int hitCount = 0;
  public int HitCount
  {
      get
      {
          return hitCount;
      }
      set
      {
          __isset.hitCount = true;
          this.hitCount = value;
      }
  }
  /**
   * @var bool
   */
  public bool evaluateTotal = false;
  public bool EvaluateTotal
  {
      get
      {
          return evaluateTotal;
      }
      set
      {
          __isset.evaluateTotal = true;
          this.evaluateTotal = value;
      }
  }
       

       


        public Isset __isset;
#if !SILVERLIGHT
        [Serializable]
#endif
        public struct Isset
        {
           
            public bool hitCount;
            public bool name;
            public bool evaluateTotal;
        }

        public PropertyQuery()
        {
        }

        public void Read(TProtocol iprot)
        {
            TField field;
            iprot.ReadStructBegin();
            while (true)
            {
                field = iprot.ReadFieldBegin();
                if (field.Type == TType.Stop)
                {
                    break;
                }
                switch (field.ID)
                {
                  
                    case 11:
                        if (field.Type == TType.String)
                        {
                            Name = iprot.ReadString();
                        }
                        else
                        {
                            TProtocolUtil.Skip(iprot, field.Type);
                        }
                        break;
                    case 21:
                        if (field.Type == TType.I32)
                        {
                            HitCount = iprot.ReadI32();
                        }
                        else
                        {
                            TProtocolUtil.Skip(iprot, field.Type);
                        }
                        break;
                    case 31:
                        if (field.Type == TType.Bool)
                        {
                            EvaluateTotal = iprot.ReadBool();
                        }
                        else
                        {
                            TProtocolUtil.Skip(iprot, field.Type);
                        }
                        break;
                    default:
                        TProtocolUtil.Skip(iprot, field.Type);
                        break;
                }
                iprot.ReadFieldEnd();
            }
            iprot.ReadStructEnd();
        }

        public void Write(TProtocol oprot)
        {
            TStruct struc = new TStruct("PropertyQuery");
            oprot.WriteStructBegin(struc);
            TField field = new TField();
          
            if (__isset.evaluateTotal)
            {
                field.Name = "evaluateTotal";
                field.Type = TType.Double;
                field.ID = 31;
                oprot.WriteFieldBegin(field);
                oprot.WriteBool(evaluateTotal);
                oprot.WriteFieldEnd();
            }
            if (name != null && __isset.name)
            {
                field.Name = "name";
                field.Type = TType.String;
                field.ID = 11;
                oprot.WriteFieldBegin(field);
                oprot.WriteString(name);
                oprot.WriteFieldEnd();
            }
            if (hitCount != null && __isset.hitCount)
            {
                field.Name = "hitCount";
                field.Type = TType.String;
                field.ID = 21;
                oprot.WriteFieldBegin(field);
                oprot.WriteString(name);
                oprot.WriteFieldEnd();
            }
            oprot.WriteFieldStop();
            oprot.WriteStructEnd();
        }

        public override string ToString()
        {
            StringBuilder __sb = new StringBuilder("PropertyQuery(");
            bool __first = true;
           
            if (__isset.evaluateTotal)
            {
                if (!__first) { __sb.Append(", "); }
                __first = false;
                __sb.Append("EvaluateTotal: ");
                __sb.Append(evaluateTotal);
            }
            if (HitCount != null && __isset.hitCount)
            {
                if (!__first) { __sb.Append(", "); }
                __first = false;
                __sb.Append("HitCount: ");
                __sb.Append(HitCount);
            }
            if (Name != null && __isset.name)
            {
                if (!__first) { __sb.Append(", "); }
                __first = false;
                __sb.Append("Name: ");
                __sb.Append(Name);
            }
            __sb.Append(")");
            return __sb.ToString();
        }

    }
}
