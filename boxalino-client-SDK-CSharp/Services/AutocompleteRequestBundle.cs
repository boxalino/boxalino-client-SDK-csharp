/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;
using boxalino_client_SDK_CSharp.Services;

namespace boxalino_client_SDK_CSharp.Services
{
    /// <summary>
    /// item found
    /// 
    /// <dl>
    /// <dt>values</dt>
    /// <dd>map containing name of the field and list of values as strings</dd>
    /// <dd>if index contains no value for a field, empty array will be returned.</dd>
    /// 
    /// <dt>score</dt>
    /// <dd>index score of the hit</dd>
    /// 
    /// <dt>scenarioId</dt>
    /// <dd>source scenarioId in case of mixed recommendations modes</dd>
    /// </dl>
    /// </summary>
#if !SILVERLIGHT
    [Serializable]
#endif
    public partial class AutocompleteRequestBundle : TBase
    {

        static string _TSPEC;

        /**
         * @var \com\boxalino\p13n\api\thrift\AutocompleteRequest[]
         */
        private List<AutocompleteRequest> requests = null;
        /**
         * @var string
         */

        public List<AutocompleteRequest> Requests
        {
            get
            {
                return requests;
            }
            set
            {
                this.requests = value;
            }
        }







        public Isset __isset;
#if !SILVERLIGHT
        [Serializable]
#endif
        public struct Isset
        {

            public bool hitCount;
            public bool name;
            public bool evaluateTotal;
        }

        public AutocompleteRequestBundle()
        {
        }

        public void Read(TProtocol iprot)
        {
            TField field;
            
            iprot.ReadStructBegin();
            while (true)
            {
                field = iprot.ReadFieldBegin();
                if (field.Type == TType.Stop)
                {
                    break;
                }
                switch (field.ID)
                {
                    case 11:
                        if (field.Type == TType.List)
                        {
                            {
                               
                                TList _list122 = iprot.ReadListBegin();
                                for (int _i123 = 0; _i123 < _list122.Count; ++_i123)
                                {
                                    AutocompleteRequest _elem124;
                                    _elem124 = new AutocompleteRequest();
                                    _elem124.Read(iprot);
                                    this.requests.Add(_elem124);
                                }
                                iprot.ReadListEnd();
                            }
                        }
                        else {
                            TProtocolUtil.Skip(iprot, field.Type);
                        }
                        break;

                    default:
                        TProtocolUtil.Skip(iprot, field.Type);
                        break;
                }
                iprot.ReadFieldEnd();
            }
            iprot.ReadStructEnd();
        }

        public void Write(TProtocol oprot)
        {
            TStruct struc = new TStruct("AutocompleteResponseBundle");
            oprot.WriteStructBegin(struc);
            TField field = new TField();
            if (this.requests != null )
            {
                field.Name = "requests";
                field.Type = TType.List;
                field.ID = 11;
                oprot.WriteFieldBegin(field);
                {
                    oprot.WriteListBegin(new TList(TType.Struct, this.requests.Count));
                    foreach (AutocompleteRequest _iter125 in this.requests)
                    {
                        _iter125.Write(oprot);
                    }
                    oprot.WriteListEnd();
                }
                oprot.WriteFieldEnd();
            }           
            oprot.WriteFieldStop();
            oprot.WriteStructEnd();
        }

        public override string ToString()
        {
            StringBuilder __sb = new StringBuilder("AutocompleteResponseBundle(");
            bool __first = true;
            if (this.requests != null)
            {
                if (!__first) { __sb.Append(", "); }
                __first = false;
                __sb.Append("requests: ");
                __sb.Append(this.requests);
            }           
            __sb.Append(")");
            return __sb.ToString();
        }

    }
}
